#Task 01: Merge Lineup

def mergeLineup(pokemon_1, pokemon_2):
  for m in range(len(pokemon_1)):
    if pokemon_1 [m] == None:
      pokemon_1 [m] = 0

  for n in range(len(pokemon_2)):
    if pokemon_2 [n] == None:
      pokemon_2 [n] = 0

  m = np.zeros(len(pokemon_1), dtype = int)
  i = 0
  j = len(pokemon_1) - 1
  for k in range(len(pokemon_1)):
    m [k] += pokemon_1 [i] + pokemon_2 [j]
    i += 1
    j -= 1
  return(m)

print("///  Task 01: Merge Lineup  ///")
pokemon_1 = np.array([12, 3, 25, 1, None])
pokemon_2 = np.array([5, -9, 3, None, None] )
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [12, 3, 28, -8, 5]
unittest.output_test(returned_value, np.array([12, 3, 28, -8, 5]))
pokemon_1 = np.array([4, 5, -1, None, None])
pokemon_2 = np.array([2, 27, 7, 12, None])
returned_value =mergeLineup(pokemon_1, pokemon_2)
print(f'Task 1: {returned_value}') # This should print [4,17,6,27,2]
unittest.output_test(returned_value, np.array([4,17,6,27,2]))

# Task 02: Discard Cards

def discardCards(cards, t):

  count_t = 0
  i = 0

  while i < len(cards):
    if cards[i] == t:
      count_t += 1
      if count_t % 2 != 0:
        for j in range(i, len(cards) - 1):
          cards[j] = cards[j + 1]
        #cards[len(cards) - 1] = 0
        continue
    i += 1
  return cards

print("///  Task 02: Discard Cards  ///")
cards = np.array([1,3,7,2,5,2,2,2,0])
returned_value = discardCards(cards, 2)
print(f'Task 2: {returned_value}') # This should print [1,3,7,5,2,2,0,0,0]
unittest.output_test(returned_value, np.array([1,3,7,5,2,2,0,0,0]))

cards = np.array([5,5,5,0,0])
returned_value = discardCards(cards, 5)
print(f'Task 2: {returned_value}') # This should print [5,0,0,0,0]
unittest.output_test(returned_value, np.array([5,0,0,0,0]))

#Task 03: Decryption Process

def decrypt_matrix(matrix):
  rows = matrix.shape[0]
  cols = matrix.shape[1]
  col_sums = np.zeros(cols, dtype=int)

  for i in range(cols):
    for j in range(rows):
      col_sums[i] += matrix[j, i]

  res_mat = np.zeros(cols - 1, dtype=int)

  for k in range(1, cols):
    res_mat[k - 1] = col_sums[k] - col_sums[k - 1]

  return res_mat

matrix=np.array([[1,3,1],
                 [6,4,2],
                 [5,1,7],
                 [9,3,3],
                 [8,5,4]
                 ])

returned_array=decrypt_matrix(matrix)
print(returned_array)
#This should print [-13, 1]

# Task 04: Zigzag Walk

def walk_zigzag(floor):
  rows, cols = floor.shape

  for col in range(cols):
    k = ''

    if col % 2 == 0:
      for row in range(0, rows, 2):
        k += floor[row, col] + ' '
    else:
      if rows % 2 == 0:
        for row in range(rows-1, -1, -2):
          k += floor[row, col] + ' '
      else:
        for row in range(rows-2, -1, -2):
          k += floor[row, col] + ' '

    print(k[:-1])

floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0'],
                  ['1' , '4' , '2' , '8' , '6']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9 1
# 1 2
# 4 7 2
# 4 9
# 1 8 6
print('################')
floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9
# 1 2
# 4 7
# 4 9
# 1 8

# Task 05: Row Rotation Policy of BRACU Classroom
def row_rotation(exam_week, seat_status):

  rows = seat_status.shape[0]
  cols = seat_status.shape[1]

  for k in range(exam_week - 1):
    for l in range(cols):
      temp = seat_status[rows - 1] [l]

      for row in range(rows - 1 , 0 , -1):
        seat_status[row][l] = seat_status[row - 1][l]
      seat_status[0][l] = temp

  print_matrix(seat_status)
  friend_row = 0

  for row in range(rows):
    for col in range(cols):
      if seat_status[row][col] == 'AA':
        friend_row = row + 1

  return friend_row


seat_status = np.array([[ 'A' , 'B' , 'C' , 'D' , 'E'],
                  ['F' , 'G' , 'H' , 'I' , 'J'],
                  ['K' , 'L' , 'M' , 'N' , 'O'],
                  ['P' , 'Q' , 'R' , 'S' , 'T'],
                  ['U' , 'V' , 'W' , 'X' , 'Y'],
                  ['Z' , 'AA' , 'BB' , 'CC' , 'DD']])
exam_week=3
print_matrix(seat_status)
print()
row_number=row_rotation(exam_week, seat_status) #This should print modified seat status after rotation
print(f'Your friend AA will be on row {row_number}') #This should print Your friend AA will be on row 2

#Task 06: Matrix Compression

def compress_matrix(mat):
  rows, cols = mat.shape
  res_mat = np.zeros((rows // 2, cols // 2), dtype=int)

  for i in range(0, rows, 2):
    for j in range(0, cols, 2):
      res_mat[i // 2, j // 2] = mat[i, j] + mat[i + 1, j] + mat[i, j + 1] + mat[i + 1, j + 1]

  return res_mat

matrix=np.array([[1,2,3,4],
                 [5,6,7,8],
                 [1,3,5,2],
                 [-2,0,6,-3]
                 ])
print_matrix(matrix)
print("...............")
returned_array=compress_matrix(matrix)
print_matrix(returned_array)
#This should print

#|  14  |  22 |
#--------------
#|  2  |  10  |
#--------------

#Task 07: Game Arena

def play_game(arena):
  total_points = 0
  rows, cols = arena.shape

  for row in range(rows):
    for col in range(cols):
      if arena[row][col] % 50 != 0 or arena[row][col] == 0:
        continue

      new_cells = [
          (row-1, col),
          (row+1, col),
          (row, col-1),
          (row, col+1)
      ]

      for r, c in new_cells:
        if 0 <= r < rows and 0 <= c < cols and arena[r][c] == 2:
          total_points += 2

  if total_points >= 10:
    print(f'Points gained: {total_points}. Your team has survived the game')
  else:
    print(f'Points gained: {total_points}. Your team is out.')

arena=np.array([[0,2,2,0],
                [50,1,2,0],
                [2,2,2,0],
                [1,100,2,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 6. Your team is out.

print(".....................")
arena=np.array([[0,2,2,0,2],
                [1,50,2,1,100],
                [2,2,2,0,2],
                [0,200,2,0,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 14. Your team has survived the game.
